/home/sdavidson2/.conda/envs/vitalschedule/lib/python3.9/site-packages/sklearn/impute/_base.py:635: UserWarning: Skipping features without any observed values: ['deathtime']. At least one non-missing value is needed for imputation with strategy='most_frequent'.
  warnings.warn(
/home/sdavidson2/.conda/envs/vitalschedule/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py:465: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(
/home/sdavidson2/.conda/envs/vitalschedule/lib/python3.9/site-packages/sklearn/impute/_base.py:635: UserWarning: Skipping features without any observed values: ['deathtime']. At least one non-missing value is needed for imputation with strategy='most_frequent'.
  warnings.warn(
/home/sdavidson2/.conda/envs/vitalschedule/lib/python3.9/site-packages/sklearn/impute/_base.py:635: UserWarning: Skipping features without any observed values: ['deathtime']. At least one non-missing value is needed for imputation with strategy='most_frequent'.
  warnings.warn(
/home/sdavidson2/.conda/envs/vitalschedule/lib/python3.9/site-packages/sklearn/impute/_base.py:635: UserWarning: Skipping features without any observed values: ['deathtime']. At least one non-missing value is needed for imputation with strategy='most_frequent'.
  warnings.warn(
/home/sdavidson2/.conda/envs/vitalschedule/lib/python3.9/site-packages/sklearn/impute/_base.py:635: UserWarning: Skipping features without any observed values: ['deathtime']. At least one non-missing value is needed for imputation with strategy='most_frequent'.
  warnings.warn(
/home/sdavidson2/.conda/envs/vitalschedule/lib/python3.9/site-packages/sklearn/impute/_base.py:635: UserWarning: Skipping features without any observed values: ['deathtime']. At least one non-missing value is needed for imputation with strategy='most_frequent'.
  warnings.warn(
/home/sdavidson2/.conda/envs/vitalschedule/lib/python3.9/site-packages/sklearn/impute/_base.py:635: UserWarning: Skipping features without any observed values: ['deathtime']. At least one non-missing value is needed for imputation with strategy='most_frequent'.
  warnings.warn(
/home/sdavidson2/.conda/envs/vitalschedule/lib/python3.9/site-packages/sklearn/impute/_base.py:635: UserWarning: Skipping features without any observed values: ['deathtime']. At least one non-missing value is needed for imputation with strategy='most_frequent'.
  warnings.warn(
/home/sdavidson2/.conda/envs/vitalschedule/lib/python3.9/site-packages/sklearn/impute/_base.py:635: UserWarning: Skipping features without any observed values: ['deathtime']. At least one non-missing value is needed for imputation with strategy='most_frequent'.
  warnings.warn(
/home/sdavidson2/.conda/envs/vitalschedule/lib/python3.9/site-packages/sklearn/impute/_base.py:635: UserWarning: Skipping features without any observed values: ['deathtime']. At least one non-missing value is needed for imputation with strategy='most_frequent'.
  warnings.warn(
/home/sdavidson2/.conda/envs/vitalschedule/lib/python3.9/site-packages/xgboost/core.py:158: UserWarning: [07:04:45] WARNING: /home/conda/feedstock_root/build_artifacts/xgboost-split_1738880431132/work/src/learner.cc:740: 
Parameters: { "use_label_encoder" } are not used.

  warnings.warn(smsg, UserWarning)
/home/sdavidson2/.conda/envs/vitalschedule/lib/python3.9/site-packages/sklearn/impute/_base.py:635: UserWarning: Skipping features without any observed values: ['deathtime']. At least one non-missing value is needed for imputation with strategy='most_frequent'.
  warnings.warn(
/home/sdavidson2/.conda/envs/vitalschedule/lib/python3.9/site-packages/sklearn/impute/_base.py:635: UserWarning: Skipping features without any observed values: ['deathtime']. At least one non-missing value is needed for imputation with strategy='most_frequent'.
  warnings.warn(
/home/sdavidson2/.conda/envs/vitalschedule/lib/python3.9/site-packages/sklearn/impute/_base.py:635: UserWarning: Skipping features without any observed values: ['deathtime']. At least one non-missing value is needed for imputation with strategy='most_frequent'.
  warnings.warn(
/home/sdavidson2/.conda/envs/vitalschedule/lib/python3.9/site-packages/sklearn/impute/_base.py:635: UserWarning: Skipping features without any observed values: ['deathtime']. At least one non-missing value is needed for imputation with strategy='most_frequent'.
  warnings.warn(
/home/sdavidson2/.conda/envs/vitalschedule/lib/python3.9/site-packages/sklearn/impute/_base.py:635: UserWarning: Skipping features without any observed values: ['deathtime']. At least one non-missing value is needed for imputation with strategy='most_frequent'.
  warnings.warn(
/home/sdavidson2/.conda/envs/vitalschedule/lib/python3.9/site-packages/sklearn/impute/_base.py:635: UserWarning: Skipping features without any observed values: ['deathtime']. At least one non-missing value is needed for imputation with strategy='most_frequent'.
  warnings.warn(
/home/sdavidson2/.conda/envs/vitalschedule/lib/python3.9/site-packages/sklearn/impute/_base.py:635: UserWarning: Skipping features without any observed values: ['deathtime']. At least one non-missing value is needed for imputation with strategy='most_frequent'.
  warnings.warn(

=== Step 1: Data Processing ===
Loading MIMIC-IV tables from /home/sdavidson2/vitalschedule/data/raw/mimic-iv...
Loading patients table...
Loading admissions table...
Loading diagnoses table...
Loading procedures table...
Loading services table...
Loading transfers table...
Loading lab events table (sample)...
Tables loaded successfully.
Creating readmission dataset with 30-day window...
Dataset created with 534236 admissions.
Overall readmission rate: 20.08%
Dataset saved to /home/sdavidson2/vitalschedule/data/processed/readmission/readmission_data.csv
Sample dataset saved to /home/sdavidson2/vitalschedule/data/processed/readmission/sample_readmission_data.csv
Summary statistics saved to /home/sdavidson2/vitalschedule/data/processed/readmission/summary_statistics.csv

=== Step 2: Feature Extraction ===
Extracting features for readmission prediction...
Extracting comorbidity features...
Extracted 29 comorbidity indicators
Calculating Elixhauser comorbidity score...
Adding service-related features...
Adding discharge location features...
Feature extraction complete. Dataset now has 89 columns.
Features saved to /home/sdavidson2/vitalschedule/data/processed/readmission/readmission_features.csv
Feature information saved to /home/sdavidson2/vitalschedule/data/processed/readmission/feature_info.csv

=== Step 3: Model Training ===
Preparing data for modeling...
Identified 43 numerical features and 42 categorical features
Training set: 427388 samples
Test set: 106848 samples
Training models...

Training logistic_regression...
logistic_regression performance:
  accuracy: 0.8131
  precision: 0.5851
  recall: 0.2383
  f1: 0.3387
  auc: 0.8362
Model saved to /home/sdavidson2/vitalschedule/outputs/readmission/run_20250318_111115/models/run_20250318_111142/logistic_regression.joblib

Training random_forest...
random_forest performance:
  accuracy: 0.8079
  precision: 0.7485
  recall: 0.0654
  f1: 0.1202
  auc: 0.8020
Model saved to /home/sdavidson2/vitalschedule/outputs/readmission/run_20250318_111115/models/run_20250318_111142/random_forest.joblib

Training gradient_boosting...
gradient_boosting performance:
  accuracy: 0.8121
  precision: 0.6401
  recall: 0.1467
  f1: 0.2387
  auc: 0.8296
Model saved to /home/sdavidson2/vitalschedule/outputs/readmission/run_20250318_111115/models/run_20250318_111142/gradient_boosting.joblib

Training xgboost...
xgboost performance:
  accuracy: 0.8166
  precision: 0.6280
  recall: 0.2127
  f1: 0.3178
  auc: 0.8397
Model saved to /home/sdavidson2/vitalschedule/outputs/readmission/run_20250318_111115/models/run_20250318_111142/xgboost.joblib

Best model: xgboost (AUC: 0.8397)
Model comparison saved to /home/sdavidson2/vitalschedule/outputs/readmission/run_20250318_111115/models/run_20250318_111142/model_comparison.csv

Best model: xgboost
AUC: 0.8397

=== Step 4: Model Evaluation ===
Evaluating model performance...
Model Performance:
  accuracy: 0.8166
  auc: 0.8397
  precision: 0.6280
  recall: 0.2127
  specificity: 0.9683
  brier_score: 0.1209
  f1: 0.3178

Evaluating on subgroup: age_group

Evaluating on subgroup: gender

Evaluating on subgroup: los_group

Evaluating on subgroup: emergency
Extracting feature importance...
Traceback (most recent call last):
  File "/home/sdavidson2/vitalschedule/code/readmission/run_pipeline.py", line 307, in <module>
    main()
  File "/home/sdavidson2/vitalschedule/code/readmission/run_pipeline.py", line 174, in main
    importance_df = extract_feature_importance(best_model, num_features, cat_features, eval_dir)
  File "/home/sdavidson2/vitalschedule/code/readmission/model_training.py", line 403, in extract_feature_importance
    cat_feature_names = cat_encoder.get_feature_names_out(cat_features)
  File "/home/sdavidson2/.conda/envs/vitalschedule/lib/python3.9/site-packages/sklearn/preprocessing/_encoders.py", line 1227, in get_feature_names_out
    input_features = _check_feature_names_in(self, input_features)
  File "/home/sdavidson2/.conda/envs/vitalschedule/lib/python3.9/site-packages/sklearn/utils/validation.py", line 2471, in _check_feature_names_in
    raise ValueError(
ValueError: input_features should have length equal to number of features (41), got 42
